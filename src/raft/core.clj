(ns raft.core)


(defrecord Raft [rpc store log current-term servers election-timeout state-machine leader?])



;
; create-raft
;
; `rpc` should be a function (fn [server rpc-name & args] result)
; where server is an opaque entry in the servers sequence.
;
; `store` should be a function (fn ([key value] nil) ([key] value))
; that persists the keys and their associated values to a non-volatile
; media.
;
; `state-machine` should be a function (fn [input] [result new-state-machine])
; where input is the command to be executed by the state machine from the log,
; result is the output generated by executing the command, and
; new-state-machine is a function like the original state machine function
; but closed over the new state.
;
; `servers` should be a sequence of server identifiers, excluding this
; server.
;
; `election-timeout` is the minimum amount of time (in milliseconds) the server
; will wait before trying to become leader itself during an election.
;
; `election-term` is the election term that the server will start on. It
; defaults to 0.
;
;
(defn create-raft
  [rpc store state-machine servers & {:keys [election-timeout election-term]
                                      :or {:election-timeout 150 :election-term 0}}]
  (Raft. rpc store [] election-term servers election-timeout state-machine false))
